apiVersion: apps/v1
kind: Deployment
metadata:
  name: song-service-development
  namespace: {{ .Release.Name }}
  labels:
    app: song-service-development
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: song-service
  template:
    metadata:
      name: song-service
      namespace: {{ .Release.Name }}
      labels:
        app: song-service
    spec:
      containers:
        - name: song-service-container
          image: "song-service-image:{{ .Values.container.service.version }}"
          livenessProbe:
            httpGet:
              port: 8081
              path: /actuator/health/liveness
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              port: 8081
              path: /actuator/health/readiness
            initialDelaySeconds: 30
            periodSeconds: 3
          env:
            - name: SONG_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-config-map
                  key: SONG_SERVICE_PORT
            - name: SONG_POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: app-config-map
                  key: SONG_POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: app-secret-config-map
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secret-config-map
                  key: POSTGRES_PASSWORD
          ports:
            - containerPort: 8081
          imagePullPolicy: Never
      restartPolicy: Always
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      